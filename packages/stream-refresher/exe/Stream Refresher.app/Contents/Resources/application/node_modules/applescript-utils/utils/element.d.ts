import type { Options as PWaitForOptions } from 'p-wait-for';
import type { BaseElementReference } from '../utils/element-reference.js';
import { ElementReference } from '../utils/element-reference.js';
export declare function getElements(processName: string, args?: {
    frontWindow?: boolean;
}): Promise<ElementReference[]>;
export declare function createBaseElementReference(elementPathString: string): BaseElementReference;
export declare function createElementReferences(elementPathStrings: string[]): ElementReference[];
declare type WaitForElementProps = {
    elementReference: ElementReference;
    interval?: number;
};
export declare function waitForElementExists({ elementReference, interval, }: WaitForElementProps): Promise<void>;
declare type WaitForElementHiddenProps = {
    elementReference: BaseElementReference;
    interval?: number;
};
export declare function waitForElementHidden({ elementReference, interval, }: WaitForElementHiddenProps): Promise<void>;
export declare function waitForElementMatch(windowName: string, elementMatcher: (element: ElementReference) => boolean | Promise<boolean>, pWaitForOptions?: PWaitForOptions): Promise<ElementReference>;
export declare function getElementProperties(element: BaseElementReference): Promise<Record<string, unknown>>;
export declare function getElementProperties(elements: BaseElementReference[]): Promise<Array<Record<string, unknown>>>;
export {};
