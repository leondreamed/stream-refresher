export class BaseElementReference {
    constructor({ path, pathString, application, applicationProcess, }) {
        Object.defineProperty(this, "path", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "pathString", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "applicationProcess", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "application", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.path = path;
        this.pathString = pathString;
        this.application = application;
        this.applicationProcess = applicationProcess;
    }
}
export class ElementReference extends BaseElementReference {
    constructor({ baseElements, elementIndex, }) {
        const element = baseElements[elementIndex];
        if (element === undefined) {
            throw new Error(`ElementReference#constructor: There is no element at index ${elementIndex}`);
        }
        super(element);
        Object.defineProperty(this, "baseElements", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "elementIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.baseElements = baseElements;
        this.elementIndex = elementIndex;
    }
    nextElement() {
        if (this.elementIndex === this.baseElements.length - 1) {
            return undefined;
        }
        return new ElementReference({
            baseElements: this.baseElements,
            elementIndex: this.elementIndex + 1,
        });
    }
    prevElement() {
        if (this.elementIndex === 0) {
            return undefined;
        }
        return new ElementReference({
            baseElements: this.baseElements,
            elementIndex: this.elementIndex - 1,
        });
    }
    get baseElement() {
        return this.baseElements[this.elementIndex];
    }
}
