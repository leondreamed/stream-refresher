{
  "name": "@leonzalion/p-wait-for",
  "version": "4.2.1",
  "description": "Wait for a condition to be true",
  "license": "MIT",
  "repository": "sindresorhus/p-wait-for",
  "funding": "https://github.com/sponsors/sindresorhus",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "https://sindresorhus.com"
  },
  "type": "module",
  "exports": "./index.js",
  "engines": {
    "node": ">=12"
  },
  "files": [
    "index.js",
    "index.d.ts"
  ],
  "keywords": [
    "promise",
    "wait",
    "for",
    "waits",
    "condition",
    "poll",
    "polling",
    "boolean",
    "async",
    "await",
    "promises",
    "bluebird"
  ],
  "dependencies": {
    "p-timeout": "^5.0.0"
  },
  "devDependencies": {
    "ava": "^3.15.0",
    "delay": "^5.0.0",
    "time-span": "^4.0.0",
    "tsd": "^0.14.0",
    "xo": "^0.38.2"
  },
  "scripts": {
    "test": "xo && ava && tsd"
  },
  "readme": "# p-wait-for\n\n> Wait for a condition to be true\n\nCan be useful for polling.\n\n## Install\n\n```sh\nnpm install p-wait-for\n```\n\n## Usage\n\n```js\nimport pWaitFor from 'p-wait-for';\nimport {pathExists} from 'path-exists';\n\nawait pWaitFor(() => pathExists('unicorn.png'));\nconsole.log('Yay! The file now exists.');\n```\n\n## API\n\n### pWaitFor(condition, options?)\n\nReturns a `Promise` that resolves when `condition` returns `true`. Rejects if `condition` throws or returns a `Promise` that rejects.\n\n#### condition\n\nType: `Function`\n\nExpected to return `Promise<boolean> | boolean`.\n\n#### options\n\nType: `object`\n\n##### interval\n\nType: `number`\\\nDefault: `20`\n\nNumber of milliseconds to wait after `condition` resolves to `false` before calling it again.\n\n##### timeout\n\nType: `number`\\\nDefault: `Infinity`\n\nNumber of milliseconds to wait before automatically rejecting with a `TimeoutError`.\n\n##### before\n\nType: `boolean`\\\nDefault: `true`\n\nWhether to run the check immediately rather than starting by waiting `interval` milliseconds.\n\nUseful for when the check, if run immediately, would likely return `false`. In this scenario, set `before` to `false`.\n\n#### resolveWith(value)\n\nResolve the main promise with a custom value.\n\n```js\nimport pWaitFor from 'p-wait-for';\nimport pathExists from 'path-exists';\n\nconst path = await pWaitFor(async () => {\n\tconst path = getPath();\n\treturn await pathExists(path) && pWaitFor.resolveWith(path);\n});\n\nconsole.log(path);\n```\n\n### TimeoutError\n\nExposed for instance checking.\n\n## Related\n\n- [p-whilst](https://github.com/sindresorhus/p-whilst) - Calls a function repeatedly while a condition returns true and then resolves the promise\n- [Moreâ€¦](https://github.com/sindresorhus/promise-fun)\n"
}